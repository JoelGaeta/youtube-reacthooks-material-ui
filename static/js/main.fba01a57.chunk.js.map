{"version":3,"sources":["components/SearchBar.js","components/VideoDetail.js","api/Youtube.js","components/VideoItem.js","components/VideoList.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","state","searchTerm","handleChange","e","setState","target","value","handleSubmit","preventDefault","onFormSubmit","props","Paper","elevation","style","padding","onSubmit","this","TextField","fullWidth","label","onChange","React","Component","VideoDetail","videos","console","log","id","videoId","videoSrc","Fragment","height","frameBorder","width","title","src","Typography","variant","snippet","channelTitle","description","axios","create","baseURL","VideoItem","onVideoSelect","Grid","item","xs","display","alignItems","cursor","onClick","marginRight","alt","thumbnails","medium","url","VideoList","listOfVideos","map","key","container","spacing","App","useState","setVideos","selectedVideo","setSelectedVideo","a","Youtube","get","params","part","q","maxResults","response","data","items","useEffect","justify","video","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fba01a57.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Paper, TextField } from \"@material-ui/core\";\r\nclass SearchBar extends React.Component {\r\n  state = {\r\n    searchTerm: \"\"\r\n  };\r\n  handleChange = e => {\r\n    this.setState({ searchTerm: e.target.value });\r\n  };\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { searchTerm } = this.state;\r\n    const { onFormSubmit } = this.props;\r\n\r\n    onFormSubmit(searchTerm);\r\n  };\r\n  render() {\r\n    return (\r\n      <Paper elevation={6} style={{ padding: \"25px\" }}>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <TextField fullWidth label=\"Search...\" onChange={this.handleChange} />\r\n        </form>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\nimport { Paper, Typography } from \"@material-ui/core\";\r\n\r\nconst VideoDetail = ({ videos }) => {\r\n  if (!videos) return <div>loading...</div>;\r\n  console.log(videos.id.videoId);\r\n  const videoSrc = `https://www.youtube.com/embed/${videos.id.videoId}`;\r\n  return (\r\n    <React.Fragment>\r\n      <Paper elevation={6} style={{ height: \"10%\" }}>\r\n        <iframe\r\n          frameBorder=\"0\"\r\n          height=\"100%\"\r\n          width=\"100%\"\r\n          title=\"Video Player\"\r\n          src={videoSrc}\r\n        />\r\n      </Paper>\r\n      <Paper elevation={6} style={{ padding: \"15px\" }}>\r\n        <Typography variant=\"h4\">\r\n          {videos.snippet.title} - {videos.snippet.channelTitle}\r\n        </Typography>\r\n        <Typography variant=\"subtitle1\">\r\n          {videos.snippet.channelTitle}\r\n        </Typography>\r\n        <Typography variant=\"subtitle2\">\r\n          {videos.snippet.description}\r\n        </Typography>\r\n      </Paper>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default VideoDetail;\r\n","import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"https://www.googleapis.com/youtube/v3\"\r\n});\r\n","import React from \"react\";\r\nimport { Grid, Paper, Typography } from \"@material-ui/core\";\r\n\r\nconst VideoItem = ({ videos, onVideoSelect }) => {\r\n  return (\r\n    <Grid item xs={12}>\r\n      <Paper\r\n        style={{ display: \"flex\", alignItems: \"center\", cursor: \"pointer\" }}\r\n        onClick={() => onVideoSelect(videos)}\r\n      >\r\n        <img\r\n          style={{ marginRight: \"20px\" }}\r\n          alt=\"thumbnail\"\r\n          src={videos.snippet.thumbnails.medium.url}\r\n        />\r\n        <Typography variant=\"subtitle1\">\r\n          <b>{videos.snippet.title}</b>\r\n        </Typography>\r\n      </Paper>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default VideoItem;\r\n","import React from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport VideoItem from \"./VideoItem\";\r\nconst VideoList = ({ videos, onVideoSelect }) => {\r\n  const listOfVideos = videos.map((videos, id) => (\r\n    <VideoItem key={id} videos={videos} onVideoSelect={onVideoSelect} />\r\n  ));\r\n  return (\r\n    <Grid container spacing={10}>\r\n      {listOfVideos}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default VideoList;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Grid } from \"@material-ui/core\";\nimport SearchBar from \"./components/SearchBar\";\nimport VideoDetail from \"./components/VideoDetail\";\nimport Youtube from \"./api/Youtube\";\nimport VideoList from \"./components/VideoList\";\n\nfunction App() {\n  const [videos, setVideos] = useState([]);\n  const [selectedVideo, setSelectedVideo] = useState(null);\n\n  const onVideoSelect = video => {\n    setSelectedVideo(video);\n  };\n  const handleSubmit = async searchTerm => {\n    const response = await Youtube.get(\"search\", {\n      params: {\n        part: \"snippet\",\n        q: searchTerm,\n        maxResults: 20,\n        key: \"AIzaSyAFDUKCcmOSixP1dn-jleIXXW01x_eDhuI\"\n      }\n    });\n    setVideos(response.data.items);\n    setSelectedVideo(response.data.items[0]);\n  };\n\n  useEffect(() => {\n    handleSubmit(\"blues guitar\");\n  }, []);\n\n  return (\n    <Grid justify=\"center\" container spacing={10}>\n      <Grid item xs={12}>\n        <Grid container spacing={10}>\n          <Grid item xs={12}>\n            <SearchBar onFormSubmit={handleSubmit} />\n          </Grid>\n          <Grid item xs={8}>\n            <VideoDetail videos={selectedVideo} />\n          </Grid>\n          <Grid item xs={4}>\n            <VideoList videos={videos} onVideoSelect={onVideoSelect} />\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}